import numpy as np

class Node(object):
    """Nodes represents discrete random variables.
    """
    
    def __init__(self, name, ls_parents=[]):
        self.name = name
        self.ls_parents = ls_parents
        self.cpt = None  # to be generated by BN.model.fit()

    @property
    def parents_nodes(self):
        """a list of parents' nodes.
        """
        return self.ls_parents
    
    @property
    def parents_names(self):
        """a list of parents' names.
        """
        return list(map(lambda x: x.name, self.ls_parents))
        
    @property
    def is_marginal(self):
        """a marginal node does not have any parents.
        """
        return not self.ls_parents
    
    def sample(self, parent_states=None, num_samples=1):
        """sample from node, according to (1) the node's conditional probability 
        table and (2) its parents' states. 

        while a node knows who its parents are, it does not know its parent's 
        state. that's because the parent is a node, which is a random variable.
        """
        
        # check if its cpt has been computed 
        if self.cpt is None:
            raise ValueError('need to fit model with observations.')

        # non-marginal nodes must know about parents' states
        if not self.is_marginal and parent_states is None:
            raise ValueError("node needs its parent's states.")

        temp_cpt = self.cpt.copy(deep=True)  # df are mutable so create deep copy
        
        # if node is not a marginal, filter its cpt by parents' state 
        if not self.is_marginal:
            
            # iteratively filter cpt
            for parent_state in parent_states:
                temp_cpt = temp_cpt.query(parent_state)

            # then drop unnecssary columns, which correspond to parents' cols
            for column in self.parents_names:
                temp_cpt = temp_cpt.drop(column, axis=1)  # https://stackoverflow.com/questions/32752299/pandas-warning-while-trying-to-delete-column
            
        # finally, draw from probability distribution
        states = np.array(temp_cpt.columns)  # possible states
        distribution = np.array(temp_cpt)  # corresponding distribution
        return np.random.choice(a=states, size=num_samples, p=distribution[0])